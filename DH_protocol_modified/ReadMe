–ü–æ—Ç—Ä–µ–±–Ω–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
DSA –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—ò–∞ (–≥–µ–Ω–µ—Ä–∏—Ä–∞—ö–µ, –ø–æ—Ç–ø–∏—Å–∏)
SHA256 –∑–∞ —Ö–∞—à–∏—Ä–∞—ö–µ
AES –µ–Ω–∫—Ä–∏–ø—Ü–∏—ò–∞ (—Å–∏–º–µ—Ç—Ä–∏—á–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—ò–∞)
Padding/unpadding ‚Äì AES —Ä–∞–±–æ—Ç–∏ —Å–æ —Ñ–∏–∫—Å–∏—Ä–∞–Ω–∞ –≥–æ–ª–µ–º–∏–Ω–∞ –Ω–∞ –±–ª–æ–∫–æ–≤–∏,
–ø–∞ –º–æ—Ä–∞ –¥–∞ —Å–µ "–ø–æ–ø–æ–ª–Ω—É–≤–∞–∞—Ç" –ø–æ—Ä–∞–∫–∏—Ç–µ

–ö–ª–∞—Å–∞ User(Alice/Bob)
–°–µ–∫–æ—ò –∫–æ—Ä–∏—Å–Ω–∏–∫ –∏–º–∞ DSA (—ò–∞–≤–µ–Ω –∏ –ø—Ä–∏–≤–∞—Ç–µ–Ω –∫–ª—É—á)
shared_secret —ú–µ –±–∏–¥–µ —Å–∏–º–µ—Ç—Ä–∏—Å–∫–∏ –∫–ª—É—á –æ–¥ DH

–ú–µ—Ç–æ–¥–∏ –∑–∞ –ø–æ—Ç–ø–∏—Å –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—ò–∞

def sign(self, message):
        hash_obj = SHA256.new(message)
        signer = DSS.new(self.dsa_private_key, 'fips-186-3')
        return signer.sign(hash_obj)

–ü–æ—Ç–ø–∏—à—É–≤–∞—ö–µ –ø–æ—Ä–∞–∫–∞: —Å–µ —Ö–∞—à–∏—Ä–∞, –ø–æ—Ç–æ–∞ —Å–µ –ø–æ—Ç–ø–∏—à—É–≤–∞ —Å–æ DSA –ø—Ä–∏–≤–∞—Ç–Ω–∏–æ—Ç –∫–ª—É—á.

def verify(self, message, signature, public_key):
        hash_obj = SHA256.new(message)
        verifier = DSS.new(public_key, 'fips-186-3')
        try:
            verifier.verify(hash_obj, signature)
            return True
        except ValueError:
            return False

–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–ø–∏—Å —Å–æ —ò–∞–≤–µ–Ω –∫–ª—É—á. –ê–∫–æ –µ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, —Å–µ —Ñ—Ä–ª–∞ –≥—Ä–µ—à–∫–∞.

AES —Å–∏–º–µ—Ç—Ä–∏—Å–∫–∞ –µ–Ω–∫—Ä–∏–ø—Ü–∏—ò–∞ –∏ –¥–µ–∫—Ä–∏–ø—Ü–∏—ò–∞
    def encrypt(self, key, message):
        cipher = AES.new(key, AES.MODE_CBC)
        ct_bytes = cipher.encrypt(pad(message, AES.block_size))
        return cipher.iv + ct_bytes
–°–∏–º–µ—Ç—Ä–∏—Å–∫–∞ –µ–Ω–∫—Ä–∏–ø—Ü–∏—ò–∞ —Å–æ AES –≤–æ CBC —Ä–µ–∂–∏–º

IV (–∏–Ω–∏—Ü–∏—ò–∞–ª–∏–∑–∞—Ü–∏—Å–∫–∏ –≤–µ–∫—Ç–æ—Ä) —Å–µ –¥–æ–¥–∞–≤–∞ –Ω–∞ –ø–æ—á–µ—Ç–æ–∫–æ—Ç (–∑–∞—Ç–æ–∞ —à—Ç–æ –µ –Ω—É–∂–µ–Ω –∑–∞ –¥–µ–∫—Ä–∏–ø—Ü–∏—ò–∞)

–§—É–Ω–∫—Ü–∏—ò–∞ diffie_hellman_key_exchange()

def diffie_hellman_key_exchange():
    p = ...
    g = 2
–ì–æ–ª–µ–º –ø—Ä–∏–º –±—Ä–æ—ò p –∏ –ø—Ä–∏–º–∏—Ç–∏–≤–µ–Ω –∫–æ—Ä–µ–Ω g

DH —Å–µ –±–∞–∑–∏—Ä–∞ –Ω–∞ –º–æ–¥—É–ª–∞—Ä–Ω–∞ –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏—ò–∞: A = g^a mod p

    a = int.from_bytes(get_random_bytes(32), 'big') % p
    b = int.from_bytes(get_random_bytes(32), 'big') % p

–ü—Ä–∏–≤–∞—Ç–Ω–∏ –≤—Ä–µ–¥–Ω–æ—Å—Ç–∏ –∑–∞ Alice (a) –∏ Bob (b)

 A = pow(g, a, p)
    B = pow(g, b, p)

–à–∞–≤–Ω–∏ –≤—Ä–µ–¥–Ω–æ—Å—Ç–∏ –∑–∞ —Ä–∞–∑–º–µ–Ω–∞

    shared_key_alice = pow(B, a, p)
    shared_key_bob = pow(A, b, p)
    assert shared_key_alice == shared_key_bob

–ò Alice –∏ Bob –¥–æ–±–∏–≤–∞–∞—Ç –∏—Å—Ç –∑–∞–µ–¥–Ω–∏—á–∫–∏ —Ç–∞–µ–Ω –∫–ª—É—á

shared_secret = hashlib.sha256(str(shared_key_alice).encode()).digest()[:16]
    return A, B, shared_secret

–ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ AES –∫–ª—É—á —Å–æ SHA256 –∏ –≥–∏ –≤—Ä–∞—ú–∞–º–µ A, B, –∏ —Å–∏–º–µ—Ç—Ä–∏—Å–∫–∏–æ—Ç –∫–ª—É—á

–ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—ò–∞ -> protocol()

–°–µ –∫—Ä–µ–∏—Ä–∞–∞—Ç –∫–æ—Ä–∏—Å–Ω–∏—Ü–∏ —Å–æ —Å–æ–ø—Å—Ç–≤–µ–Ω–∏ DSA –∫–ª—É—á–µ–≤–∏.

def protocol():
    alice = User("Alice")
    bob = User("Bob")

Alice  –º—É –≥–æ –ø—Ä–∞—ú–∞ —Å–≤–æ—ò–æ—Ç DH —ò–∞–≤–µ–Ω –∫–ª—É—á –º–∞ –ë–æ–±.

  A, B, shared_key = diffie_hellman_key_exchange()
    print("[1] Alice ‚Üí Bob: A =", A)

Bob –≥–æ –ø–æ—Ç–ø–∏—à—É–≤–∞ (B, A)
–ì–æ –µ–Ω–∫—Ä–∏–ø—Ç–∏—Ä–∞ –ø–æ—Ç–ø–∏—Å–æ—Ç —Å–æ DH –∑–∞–µ–¥–Ω–∏—á–∫–∏–æ—Ç –∫–ª—É—á
–à–∞ –ø—Ä–∞—ú–∞ B –∏ –µ–Ω–∫—Ä–∏–ø—Ç–∏—Ä–∞–Ω–∏–æ—Ç –ø–æ—Ç–ø–∏—Å

 signed_by_bob = bob.sign(f"{B},{A}".encode())
    encrypted_payload = bob.encrypt(shared_key, signed_by_bob)
    print("[2] Bob ‚Üí Alice: B =", B, ", Encrypted Sig =", encrypted_payload.hex())

Alice –≥–æ –¥–µ—à–∏—Ñ—Ä–∏—Ä–∞ –ø–æ—Ç–ø–∏—Å–æ—Ç
–ì–æ –≤–µ—Ä–∏—Ñ–∏–∫—É–≤–∞ —Å–æ Bob-–æ–≤–∏–æ—Ç —ò–∞–≤–µ–Ω DSA –∫–ª—É—á

  decrypted_signature = alice.decrypt(shared_key, encrypted_payload)
    if alice.verify(f"{B},{A}".encode(), decrypted_signature, bob.dsa_public_key):
        print("‚úÖ Alice –≥–æ –≤–µ—Ä–∏—Ñ–∏–∫—É–≤–∞ –ø–æ—Ç–ø–∏—Å–æ—Ç –Ω–∞ Bob.")

Alice –ø–æ—Ç–ø–∏—à—É–≤–∞ (A, B)
–ì–æ –µ–Ω–∫—Ä–∏–ø—Ç–∏—Ä–∞ –ø–æ—Ç–ø–∏—Å–æ—Ç –∏ –≥–æ –ø—Ä–∞—ú–∞ –Ω–∞–∑–∞–¥

 signed_by_alice = alice.sign(f"{A},{B}".encode())
    encrypted_response = alice.encrypt(shared_key, signed_by_alice)
    print("[3] Alice ‚Üí Bob: Encrypted Sig =", encrypted_response.hex())

Bob —ò–∞ –¥–µ—à–∏—Ñ—Ä–∏—Ä–∞ –ø–æ—Ä–∞–∫–∞—Ç–∞
–ì–æ –≤–µ—Ä–∏—Ñ–∏–∫—É–≤–∞ –ø–æ—Ç–ø–∏—Å–æ—Ç –∏ –∞–∫–æ –µ –≤–∞–ª–∏–¥–µ–Ω ‚Äì –≤—Ä—Å–∫–∞—Ç–∞ –µ –≤–æ—Å–ø–æ—Å—Ç–∞–≤–µ–Ω–∞

decrypted_response = bob.decrypt(shared_key, encrypted_response)
    if bob.verify(f"{A},{B}".encode(), decrypted_response, alice.dsa_public_key):
        print("Bob –≥–æ –≤–µ—Ä–∏—Ñ–∏–∫—É–≤–∞ –ø–æ—Ç–ø–∏—Å–æ—Ç –Ω–∞ Alice.")
        print("üîê Secure communication established.")
    else:
        print("–ü–æ—Ç–ø–∏—Å–æ—Ç –Ω–∞ Alice –µ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω!")